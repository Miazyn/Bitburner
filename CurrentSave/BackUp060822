{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":270,\"hp\":19,\"max_hp\":19,\"strength\":91,\"defense\":91,\"dexterity\":92,\"agility\":92,\"charisma\":100,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":2461363.956090712,\"strength_exp\":8581.551999998885,\"defense_exp\":8579.471999999123,\"dexterity_exp\":8725.352000000108,\"agility_exp\":8844.272000001161,\"charisma_exp\":11287.559999997382,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":52471795.26857026,\"city\":\"Ishima\",\"location\":\"Omega Software\",\"jobs\":{\"Joe's Guns\":\"Part-time Employee\",\"National Security Agency\":\"IT Intern\"},\"companyName\":\"National Security Agency\",\"currentServer\":\"crush-fitness\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-0-0\",\"pserv-1-0\",\"pserv-2-0\",\"pserv-3-0\",\"pserv-4-0\",\"pserv-5-0\",\"pserv-6-0\",\"pserv-7-0\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":70,\"moneyGainRatePerSecond\":263.86744084346503,\"onlineTimeSeconds\":294777.20000098355,\"ram\":16,\"totalMoneyGenerated\":43383250.239807755,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":70,\"moneyGainRatePerSecond\":263.86744084346503,\"onlineTimeSeconds\":293564.2000010053,\"ram\":16,\"totalMoneyGenerated\":43368917.9286288,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":71,\"moneyGainRatePerSecond\":203.24661222696005,\"onlineTimeSeconds\":293548.2000010056,\"ram\":8,\"totalMoneyGenerated\":36485038.491718985,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":17.077499999999997,\"onlineTimeSeconds\":100117.59999991371,\"ram\":2,\"totalMoneyGenerated\":1704117.626996487,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":17.077499999999997,\"onlineTimeSeconds\":100116.59999991371,\"ram\":2,\"totalMoneyGenerated\":1704103.6649964869,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":17.077499999999997,\"onlineTimeSeconds\":100115.9999999137,\"ram\":2,\"totalMoneyGenerated\":1704093.302996487,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":16.5,\"onlineTimeSeconds\":100113.5999999137,\"ram\":1,\"totalMoneyGenerated\":1651550.400001365,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":16.5,\"onlineTimeSeconds\":100112.7999999137,\"ram\":1,\"totalMoneyGenerated\":1651543.200001365,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":16.5,\"onlineTimeSeconds\":100111.99999991369,\"ram\":1,\"totalMoneyGenerated\":1651536.000001365,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":16.5,\"onlineTimeSeconds\":100109.59999991368,\"ram\":1,\"totalMoneyGenerated\":1651517.400001365,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":16.5,\"onlineTimeSeconds\":100109.19999991369,\"ram\":1,\"totalMoneyGenerated\":1651510.8000013651,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":11,\"moneyGainRatePerSecond\":16.5,\"onlineTimeSeconds\":100108.79999991368,\"ram\":1,\"totalMoneyGenerated\":1651501.2000013653,\"name\":\"hacknet-node-11\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":2,\"karma\":-14.5,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1659749276288,\"lastSave\":1659749258301,\"totalPlaytime\":295300200,\"playtimeSinceLastAug\":295300200,\"playtimeSinceLastBitnode\":295300200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-4747976,\"codingcontract\":0,\"corporation\":0,\"crime\":3530000,\"gang\":0,\"hacking\":565375903.8501185,\"hacknet\":138258680.25388342,\"hacknet_expenses\":-11510974.117527872,\"hospitalization\":-3429831.8747989708,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":52470775.26857026,\"work\":368222,\"servers\":-475989959.7224816,\"other\":-800000,\"augmentations\":-158583289.12641996}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-4747976,\"codingcontract\":0,\"corporation\":0,\"crime\":3530000,\"gang\":0,\"hacking\":565375903.8501185,\"hacknet\":138258680.25388342,\"hacknet_expenses\":-11510974.117527872,\"hospitalization\":-3429831.8747989708,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":52470775.26857026,\"work\":368222,\"servers\":-475989959.7224816,\"other\":-800000,\"augmentations\":-158583289.12641996}},\"scriptProdSinceLastAug\":385298099,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1659454407653},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1659454527664},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1659457947647},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1659458247655},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1659473300787},{\"ID\":\"WORKOUT\",\"unlockedOn\":1659477020789},{\"ID\":\"TOR\",\"unlockedOn\":1659477996171},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1659489758782},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1659491439370},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1659649052589},{\"ID\":\"TRAVEL\",\"unlockedOn\":1659657573164},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1659743030337}],\"terminalCommandHistory\":[\"scan-analyze\",\"scan-analyze 2\",\"scan-analyze 3\",\"analyze\",\"home\",\"ls\",\"deploy\",\"nano v2/deployer.js\",\"run v2/deployer.js\",\"help\",\"tail v2/deployer.js\",\"scan\",\"check v2/deployer.js\",\"run v2/deployer.js\",\"nano v2/deployer.js\",\"run v2/deployer.js\",\"scan-analyze 2\",\"run v2/deployer.js\",\"scan-analyze 2\",\"run v2/deployer.js\",\"scan-analyze 3\",\"run v2/deployer.js\",\"ls\",\"run v2/deployer.js\",\"ls\",\"run v2/deployer.js\",\"scan-analyze 5\",\"run v2/deployer.js\",\"ls\",\"kill\",\"killSwitch\",\"run v2/deployer.js\",\"nano allServers.txt\",\"unalias deploy\",\"alias deploy=\\\"run v2/deployer.js\\\"\",\"deploy\",\"nano v2/deployer.js\",\"deploy\",\"scan-analyze 3\",\"backdoor\",\"ho\",\"home\",\"scan-analyze 4\",\"backdoor\",\"analyze\",\"run NUKE.exe\",\"weaken\",\"home\",\"scan-analyze 5\",\"backdoor\"],\"identifier\":\"1110b2f88ff1ee\",\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"44.5.8.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"relaySMTP.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var ram = 16;\\r\\n\\r\\nvar i = 0;\\r\\n\\r\\nwhile (i < getPurchasedServerLimit()) {\\r\\n\\r\\n\\tif (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram) * 1.5) {\\r\\n\\t\\tvar hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n\\t\\tscp(\\\"early-hack-template.script\\\", hostname);\\r\\n\\t\\texec(\\\"early-hack-template.script\\\", hostname, 3);\\r\\n\\t\\ti++;\\r\\n\\t\\talert(\\\"Purchased Server\\\");\\r\\n\\t}\\r\\n\\r\\n\\r\\n}\\r\\nalert(\\\"Purchased all servers\\\");\\r\\n\\r\\nexit();\",\"filename\":\"purchase-server-16gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":1601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"alert(\\\"I am running\\\");\",\"filename\":\"/testing/test.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":84,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"CSEC\\\";\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\t\\tweaken(target);\\r\\n\\r\\n}\",\"filename\":\"/farmingHackExp/hackfarm.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":85,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"zer0\\\";\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\t\\tweaken(target);\\r\\n\\r\\n}\",\"filename\":\"/farmingHackExp/hackZer0.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":86,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet Player = ns.getPlayer();\\n\\n\\twhile (Player.agility < 200 || Player.strength < 200 || Player.defense < 200 || Player.dexterity < 200) {\\n\\n\\t\\tif (Player.agility < 200) {\\n\\n\\t\\t\\tns.gymWorkout('iron gym', 'Agility', true);\\n\\t\\t\\tawait ns.sleep(600000);\\n\\t\\t\\tns.stopAction();\\n\\t\\t}\\n\\t\\telse if (Player.strength < 200) {\\n\\t\\t\\tns.gymWorkout('iron gym', 'Strength', true);\\n\\t\\t\\tawait ns.sleep(600000);\\n\\t\\t\\tns.stopAction();\\n\\t\\t}\\n\\t\\telse if (Player.defense < 200) {\\n\\t\\t\\tns.gymWorkout('iron gym', 'Defense', true);\\n\\t\\t\\tawait ns.sleep(600000);\\n\\t\\t\\tns.stopAction();\\n\\t\\t}\\n\\t\\telse if (Player.dexterity < 200) {\\n\\t\\t\\tns.gymWorkout('iron gym', 'Dexterity', true);\\n\\t\\t\\tawait ns.sleep(600000);\\n\\t\\t\\tns.stopAction();\\n\\t\\t}\\n\\t\\tPlayer = ns.getPlayer();\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"/farmingExp/workout.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/farmingExp/workout.js\",\"url\":\"blob:file:///6539a47b-4c2c-40bf-8070-a4931b17ace1\",\"moduleSequenceNumber\":12501}],\"dependents\":[],\"ramUsage\":50.1,\"server\":\"home\",\"moduleSequenceNumber\":87,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.gymWorkout\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///ed4a70bf-cbe4-48f2-9954-fb466b83fa5e\",\"moduleSequenceNumber\":7743}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":21776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet servers = ns.scan(\\\"home\\\");\\n\\tlet serverHackName = \\\"n00dles\\\";\\n\\tns.tprint(servers);\\n\\n\\tfor (let serverName of servers) {\\n\\n\\t\\tawait ns.scp(\\\"early-hack-template.js\\\", serverName);\\n\\n\\t\\tlet openPorts = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\tns.brutessh(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\tns.ftpcrack(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\")) {\\n\\t\\t\\tns.relaysmtp(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\tns.httpworm(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\tns.sqlinject(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.getServerNumPortsRequired(serverName) <= openPorts) {\\n\\t\\t\\tns.nuke(serverName);\\n\\t\\t}\\n\\n\\t\\tlet ramAvailable = ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n\\t\\tlet ramPerThread = ns.getScriptRam(\\\"early-hack-template.js\\\");\\n\\n\\t\\tlet threads = Math.floor(ramAvailable / ramPerThread);\\n\\n\\n\\t\\tif (ns.hasRootAccess(serverName)) {\\n\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\tns.exec(\\\"early-hack-template.js\\\", serverName, 1, serverHackName);\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tns.exec(\\\"early-hack-template.js\\\", serverName, threads, serverHackName);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tawait ns.scp(\\\"hackFarmGeneral.js\\\", serverName);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"deployer.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"deployer.js\",\"url\":\"blob:file:///1af9864f-80ee-44e2-92f9-89c6fd18b0c5\",\"moduleSequenceNumber\":3449}],\"dependents\":[],\"ramUsage\":4.45,\"server\":\"home\",\"moduleSequenceNumber\":22040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet servers = ns.scan(\\\"home\\\");\\n\\tns.tprint(servers);\\n\\tfor (let serverName of servers) {\\n\\n\\t\\tawait ns.scp(\\\"early-hack-template.js\\\", serverName);\\n\\n\\t\\tlet openPorts = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\tns.brutessh(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\tns.ftpcrack(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\")) {\\n\\t\\t\\tns.relaysmtp(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\tns.httpworm(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\tns.sqlinject(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.getServerNumPortsRequired(serverName) <= openPorts) {\\n\\t\\t\\tns.nuke(serverName);\\n\\t\\t}\\n\\t\\tif (ns.hasRootAccess(serverName)) {\\n\\t\\t\\tns.killall(serverName);\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"killSwitch.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"killSwitch.js\",\"url\":\"blob:file:///de691431-30da-4b35-bff4-d07bf033b8e6\",\"moduleSequenceNumber\":21162}],\"dependents\":[],\"ramUsage\":3.45,\"server\":\"home\",\"moduleSequenceNumber\":21162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tns.exec(\\\"killSwitch.js\\\", \\\"home\\\", 1);\\n\\tns.exec(\\\"v2/deployer.js\\\", \\\"home\\\", 1, 'n00dles');\\n\\tns.exec(\\\"purchase-server-16gb.script\\\", \\\"home\\\", 1);\\n}\",\"filename\":\"startUp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"startUp.js\",\"url\":\"blob:file:///ca893c90-7af1-40ef-a2c5-f623d239c37e\",\"moduleSequenceNumber\":8731}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":22572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet servers = [\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"CSEC\\\", \\\"neo-net\\\", \\\"the-hub\\\", \\\"I.I.I.I\\\",\\n\\t\\t\\\"johnson-ortho\\\", \\\"omega-net\\\", \\\"computek\\\", \\\"rothman-uni\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\",\\n\\t\\t\\\"harakiri-sushi\\\", \\\"nectar-net\\\", \\\"max-hardware\\\", \\\"silver-helix\\\", \\\"crush-fitness\\\",\\n\\t\\t\\\"zb-institute\\\", \\\"avmnite-02h\\\", \\\"phantasy\\\", \\\"netlink\\\", \\\"summit-uni\\\", \\\"syscore\\\",\\n\\t\\t\\\"catalyst\\\", \\\"iron-gym\\\", \\\"zer0\\\", \\\"darkweb\\\"];\\n\\tlet serversToScan = ns.scan(\\\"home\\\");\\n\\tlet serverHackName = \\\"n00dles\\\";\\n\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tlet server = serversToScan.shift();\\n\\t\\tif (!servers.includes(server)) {\\n\\t\\t\\tservers.push(server);\\n\\t\\t}\\n\\n\\t}\\n\\n\\tfor (let serverName of servers) {\\n\\n\\t\\tawait ns.scp(\\\"early-hack-template.js\\\", serverName);\\n\\n\\t\\tlet openPorts = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\tns.brutessh(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\tns.ftpcrack(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\")) {\\n\\t\\t\\tns.relaysmtp(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\tns.httpworm(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\tns.sqlinject(serverName);\\n\\t\\t\\topenPorts++;\\n\\t\\t}\\n\\t\\tif (ns.getServerNumPortsRequired(serverName) <= openPorts) {\\n\\t\\t\\tns.nuke(serverName);\\n\\t\\t}\\n\\n\\t\\tlet ramAvailable = ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n\\t\\tlet ramPerThread = ns.getScriptRam(\\\"early-hack-template.js\\\");\\n\\n\\t\\tlet threads = Math.floor(ramAvailable / ramPerThread);\\n\\n\\n\\t\\tif (ns.hasRootAccess(serverName)) {\\n\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\tns.exec(\\\"early-hack-template.js\\\", serverName, 1, serverHackName);\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tns.exec(\\\"early-hack-template.js\\\", serverName, threads, serverHackName);\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t}\\n\\n\\n\\t//ns.tprint(servers);\\n\\t//ns.tail();\\n\\t//MAX DEPTH IS 5 !!!\\n}\",\"filename\":\"/v2/deployer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/v2/deployer.js\",\"url\":\"blob:file:///deb4d4ef-ff22-40f6-b995-be89caf17c92\",\"moduleSequenceNumber\":23023}],\"dependents\":[],\"ramUsage\":4.45,\"server\":\"home\",\"moduleSequenceNumber\":23023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\t\\n\\n}\",\"filename\":\"/farmingExp/jobs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":93,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":2270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-0-0\",\"pserv-1-0\",\"pserv-2-0\",\"pserv-3-0\",\"pserv-4-0\",\"pserv-5-0\",\"pserv-6-0\",\"pserv-7-0\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"allServers.txt\",\"text\":\"\\\"n00dles\\\", \\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"CSEC\\\", \\\"neo-net\\\", \\\"the-hub\\\" ,  \\\"I.I.I.I\\\" ,\\r\\n\\\"johnson-ortho\\\", \\\"omega-net\\\", \\\"computek\\\", \\\"rothman-uni\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\", \\\"nectar-net\\\", \\\"max-hardware\\\", \\\"silver-helix\\\", \\\"crush-fitness\\\",\\r\\n\\\"zb-institute\\\", \\\"avmnite-02h\\\", \\\"phantasy\\\", \\\"netlink\\\", \\\"summit-uni\\\", \\\"syscore\\\",\\r\\n\\\"catalyst\\\", \\\"iron-gym\\\", \\\"zer0\\\", \\\"darkweb\\\"\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"44.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":31849553911,\"moneyMax\":796238847775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1206,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-606040.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11010101110110011111011000111000011101110011110101111010011\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"70.4.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49630607094,\"moneyMax\":1240765177350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1195,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"80.1.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":22576126683,\"moneyMax\":564403167075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1099,\"serverGrowth\":63}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"55.8.4.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":33371665401,\"moneyMax\":834291635025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1100,\"serverGrowth\":73}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"7.2.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":31600569820,\"moneyMax\":790014245500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1092,\"serverGrowth\":84}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455646.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[174,17,2,63,34,155,66,70,34,128,59,125,13,45,123,57,132,103,31,162,160,101,143,70,99,30,143,106,96,105,1,139,64,100,50,123,178],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"25.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":19853315449,\"moneyMax\":496332886225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":984,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"99.0.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":16259883610,\"moneyMax\":406497090250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":966,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509246-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,1,0,0,1,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,1,0,0,1],[0,0,0,0,1,0],[0,0,1,0,0,0]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"42.8.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":21680550661,\"moneyMax\":542013766525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1180,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"62.0.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25504180539,\"moneyMax\":637604513475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1034,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"46.6.1.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1675523817,\"moneyMax\":41888095425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1039,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"0.1.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1354,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-284439-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[10,3,-2,1,-10,-3,6,1,-2,-2,3,-3,8,-5,-7,-8,-3,2,-4,1,10,8,0,-6,5],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"86.6.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1153264185,\"moneyMax\":28831604625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":924,\"serverGrowth\":79}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-112843.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[18,17,30,40,33,18],[23,30,50,6,32,23],[18,4,2,42,9,15],[43,46,48,9,30,7],[46,38,35,27,38,16],[30,26,7,19,33,20],[49,37,4,4,5,25],[9,24,12,37,35,10],[45,34,44,22,12,21],[42,41,13,29,41,5],[47,26,18,41,28,28],[43,30,26,20,21,50],[5,42,18,10,49,11],[37,21,11,19,27,39],[42,9,20,34,20,18]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"87.5.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":824267565,\"moneyMax\":20606689125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":904,\"serverGrowth\":67}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"22.3.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":745287146,\"moneyMax\":18632178650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":892,\"serverGrowth\":40}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"12.0.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":650194529,\"moneyMax\":16254863225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"79.2.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":760337171,\"moneyMax\":19008429275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":64}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"52.1.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":997175894,\"moneyMax\":24929397350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":906,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"83.4.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1146090703,\"moneyMax\":28652267575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":899,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-847486.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0011000011\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"4.7.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":844324592,\"moneyMax\":21108114800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":65}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"54.0.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":513620383,\"moneyMax\":12840509575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":78}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"27.7.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":880418776,\"moneyMax\":22010469400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"10.4.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":836869596,\"moneyMax\":20921739900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"53.4.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1182416752,\"moneyMax\":29560418800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"14.7.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":913636449,\"moneyMax\":22840911225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"64.3.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":960362348,\"moneyMax\":24009058700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":69}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-930957-CyberSec.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,3,2,3,0,0,2,3,1,6,3,1,1,5,3,0,3,1,0,1,5],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"22.6.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":722283205,\"moneyMax\":18057080125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"31.3.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":747855485,\"moneyMax\":18696387125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":783,\"serverGrowth\":73}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"57.9.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1364138098,\"moneyMax\":34103452450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"46.7.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1635718439,\"moneyMax\":40892960975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":776,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"15.6.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1112302212,\"moneyMax\":27807555300,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":65}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"99.3.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1307781970,\"moneyMax\":32694549250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"19.5.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1094955240,\"moneyMax\":27373881000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"43.7.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":716795752,\"moneyMax\":17919893800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":713,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"44.6.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":640726569,\"moneyMax\":16018164225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":56}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"30.8.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":724343948,\"moneyMax\":18108598700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":571,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"69.0.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":215110318,\"moneyMax\":5377757950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":404,\"serverGrowth\":48}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"67.7.2.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":127.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[5093599,1029,784,147]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6548.849999999996,\"onlineMoneyMade\":5093599,\"onlineRunningTime\":699.6100000000221,\"pid\":84,\"ramUsage\":2.6,\"server\":\"rothman-uni\",\"threads\":49,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///168a959a-6f81-4036-892e-68f617dea33f\",\"moduleSequenceNumber\":19807}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":22714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":195383117,\"moneyMax\":4884577925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":414,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-903607-CyberSec.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"968p4dgNq201Y87386B669YlBtzv2S109eYkxDbHqs724akiF\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"60.5.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":22722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":839891801,\"moneyMax\":20997295025,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":772,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"41.8.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1108812,252,192,36]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1593.899999999999,\"onlineMoneyMade\":1108812,\"onlineRunningTime\":699.6100000000221,\"pid\":88,\"ramUsage\":2.6,\"server\":\"summit-uni\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///ffea1da5-ed95-4c70-a7cd-74dbca7eb571\",\"moduleSequenceNumber\":19832}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":22726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":232427156,\"moneyMax\":5810678900,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":445,\"serverGrowth\":42}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"34.9.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"syscore\",\"moduleSequenceNumber\":22727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":403334477,\"moneyMax\":10083361925,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":622,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"76.0.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[512604,126,96,18]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":801.8999999999995,\"onlineMoneyMade\":512604,\"onlineRunningTime\":699.6100000000221,\"pid\":89,\"ramUsage\":2.6,\"server\":\"catalyst\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///bfc09c65-674c-44cd-b65b-98a5540b1e0f\",\"moduleSequenceNumber\":19836}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":22728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":312633027,\"moneyMax\":7815825675,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":447,\"serverGrowth\":42}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"26.1.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2190672,456,408,72]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3128.3999999999983,\"onlineMoneyMade\":2190672,\"onlineRunningTime\":699.6100000000221,\"pid\":82,\"ramUsage\":2.6,\"server\":\"the-hub\",\"threads\":24,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///210d088e-1ded-4ecc-bbbf-68ce4dc7cd5b\",\"moduleSequenceNumber\":19794}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":22709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":171475828,\"moneyMax\":4286895700,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":305,\"serverGrowth\":52}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"76.0.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"computek\",\"moduleSequenceNumber\":22713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":231886615,\"moneyMax\":5797165375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":321,\"serverGrowth\":51}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"0.0.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[4863250,980,784,147]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6387.149999999996,\"onlineMoneyMade\":4863250,\"onlineRunningTime\":699.6100000000221,\"pid\":87,\"ramUsage\":2.6,\"server\":\"netlink\",\"threads\":49,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///12262c4d-bec8-4fbd-acf5-42fec829589b\",\"moduleSequenceNumber\":19829}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"netlink\",\"moduleSequenceNumber\":22725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":419,\"serverGrowth\":45}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-547828-CyberSec.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9AFMyQNelf08zx2n26Zb265uh8lY984hbHy687TJX0BGo1336EL31\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-534970-NationalSecurityAgency.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[3,8],[2,6],[6,9],[1,8],[2,7],[2,3],[3,9],[0,1],[7,9],[9,10],[7,9],[4,10],[1,11],[4,6],[5,7]]],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"14.0.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":22711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":81018653,\"moneyMax\":2025466325,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":269,\"serverGrowth\":62}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"23.2.2.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[64660,14,11,2]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":89.09999999999995,\"onlineMoneyMade\":64660,\"onlineRunningTime\":474.2099999999816,\"pid\":93,\"ramUsage\":2.6,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///c998ac32-d4ca-488b-8ea6-6775cc4a29e9\",\"moduleSequenceNumber\":165}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"iron-gym\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":94,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///65d815d4-154b-42b1-87f2-2ab3e9079bf5\",\"moduleSequenceNumber\":21197}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":22704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.100000000000001,\"minDifficulty\":1,\"moneyAvailable\":1707166,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"31.9.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[366858,78,66,12]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":519.7500000000001,\"onlineMoneyMade\":366858,\"onlineRunningTime\":474.2099999999816,\"pid\":94,\"ramUsage\":2.6,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///c30308bf-5ef8-4916-9721-3f3ebc6f8292\",\"moduleSequenceNumber\":166}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"iron-gym\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":96,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///54faf64f-aa75-41cc-afaf-8486b6165ce4\",\"moduleSequenceNumber\":21198}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":22705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"70.6.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[377532,84,66,12]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":534.6000000000001,\"onlineMoneyMade\":377532,\"onlineRunningTime\":474.2099999999816,\"pid\":95,\"ramUsage\":2.6,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///3872afca-fdc6-499f-9a23-da0af92cd968\",\"moduleSequenceNumber\":167}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"iron-gym\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":98,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///89f80c7c-a193-4b2d-afcf-b9bec39988e4\",\"moduleSequenceNumber\":21200}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":22706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"66.4.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[364386,96,66,12]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":574.2,\"onlineMoneyMade\":364386,\"onlineRunningTime\":474.2099999999816,\"pid\":97,\"ramUsage\":2.6,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///4c43d633-07c7-49d5-8bb8-4fa659fc9ef7\",\"moduleSequenceNumber\":168}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"iron-gym\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///61c0b335-f791-478e-8f55-a7e6f659d9a4\",\"moduleSequenceNumber\":21209}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":22715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":75.5820000000023,\"minDifficulty\":5,\"moneyAvailable\":322,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"41.1.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[0,0,0,2144]},\"filename\":\"hackZer0.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":89562.79292333334,\"offlineMoneyMade\":0,\"offlineRunningTime\":240111.798,\"onlineExpGained\":22512,\"onlineMoneyMade\":0,\"onlineRunningTime\":19130.0100000345,\"pid\":5,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":16,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[100401,21,17,3]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":135.29999999999995,\"onlineMoneyMade\":100401,\"onlineRunningTime\":699.6100000000221,\"pid\":90,\"ramUsage\":2.6,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"zer0\",\"moduleSequenceNumber\":102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"zer0\\\";\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\t\\tweaken(target);\\r\\n\\r\\n}\",\"filename\":\"hackZer0.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///21e094b6-cf8d-42b4-9532-3c2ea8832419\",\"moduleSequenceNumber\":19839}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"zer0\",\"moduleSequenceNumber\":22730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"96.9.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[40228482,14376,0,0]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":126069.55332991987,\"offlineMoneyMade\":0,\"offlineRunningTime\":240111.90800000002,\"onlineExpGained\":35120.24999999929,\"onlineMoneyMade\":40228482,\"onlineRunningTime\":31430.610000078348,\"pid\":6,\"ramUsage\":2.6,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"n00dles\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile(true){\\r\\n\\r\\n\\r\\n\\tif(getServerSecurityLevel > securityThreshold){\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if(getServerMoneyAvailable < moneyThreshold){\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse\\r\\n\\t{\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":22718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"82.0.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1140300,264,192,36]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1623.599999999999,\"onlineMoneyMade\":1140300,\"onlineRunningTime\":699.6100000000221,\"pid\":81,\"ramUsage\":2.6,\"server\":\"neo-net\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///db8ba371-643a-42f7-a00d-74bffb2d47b0\",\"moduleSequenceNumber\":19791}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":22708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"83.8.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2904096,624,360,72]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3484.7999999999975,\"onlineMoneyMade\":2904096,\"onlineRunningTime\":699.6100000000221,\"pid\":85,\"ramUsage\":2.6,\"server\":\"silver-helix\",\"threads\":24,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///1ca2402e-c7e8-4446-b451-67c70103bc91\",\"moduleSequenceNumber\":19815}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":22720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"91.2.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[355110,90,66,12]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":559.35,\"onlineMoneyMade\":355110,\"onlineRunningTime\":474.2099999999816,\"pid\":98,\"ramUsage\":2.6,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///c1bb5d6f-ef07-48e9-9368-7df711154c24\",\"moduleSequenceNumber\":169}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"iron-gym\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///d8a7ccea-303f-44b3-b633-894dc0e14a02\",\"moduleSequenceNumber\":21210}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":22716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"5.0.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[370896,96,66,12]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":574.2,\"onlineMoneyMade\":370896,\"onlineRunningTime\":474.2099999999816,\"pid\":99,\"ramUsage\":2.6,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///120044be-e889-40cb-af3b-c5054ddcc03f\",\"moduleSequenceNumber\":170}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"iron-gym\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///6bf04a1c-d605-4bf9-a723-803960bc2b75\",\"moduleSequenceNumber\":21212}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":22717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"59.9.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1079712,228,204,36]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1564.1999999999991,\"onlineMoneyMade\":1079712,\"onlineRunningTime\":699.6100000000221,\"pid\":86,\"ramUsage\":2.6,\"server\":\"phantasy\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///5e4bb513-ed98-4b49-b17f-5ae14c167663\",\"moduleSequenceNumber\":19826}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":22724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"41.1.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[0,3144,0,0]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":131153.0591917558,\"offlineMoneyMade\":0,\"offlineRunningTime\":240112.16500000004,\"onlineExpGained\":17820,\"onlineMoneyMade\":0,\"onlineRunningTime\":31419.81000007831,\"pid\":9,\"ramUsage\":2.6,\"server\":\"max-hardware\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":22719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-517491.cct\",\"type\":\"Total Ways to Sum\",\"data\":66,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"23.3.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1094772,216,204,36]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1534.499999999999,\"onlineMoneyMade\":1094772,\"onlineRunningTime\":699.6100000000221,\"pid\":83,\"ramUsage\":2.6,\"server\":\"omega-net\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///84444a1b-4266-40de-b332-dc825d0ec27f\",\"moduleSequenceNumber\":19803}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":22712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":27,\"minDifficulty\":9,\"moneyAvailable\":62266795,\"moneyMax\":1556669875,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":206,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-858865.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[199,[2,3,4,7,8,9,10,11,12,13,14,19]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"43.7.7.0\",\"isConnectedTo\":true,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":22721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":53442767,\"moneyMax\":1336069175,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":258,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-684381.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[3,7],[3,4],[2,6],[5,7],[7,8],[2,3],[0,7],[4,5],[4,6],[0,2]]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"89.7.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[763080,192,132,24]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1148.4,\"onlineMoneyMade\":763080,\"onlineRunningTime\":474.2099999999816,\"pid\":101,\"ramUsage\":2.6,\"server\":\"iron-gym\",\"threads\":12,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///d5f5b927-5222-4845-ba36-4ac10ac2f151\",\"moduleSequenceNumber\":171}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"iron-gym\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///e08d12c3-76fb-4ee4-8e30-c672dfe7dc5f\",\"moduleSequenceNumber\":21225}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":22729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":33.98800000000022,\"minDifficulty\":10,\"moneyAvailable\":1097549,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"6.2.8.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":484,\"serverGrowth\":25}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"74.3.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":970,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"58.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":776,\"serverGrowth\":60}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"8.5.0.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":505,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-302032.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"i6K70gvi6KVM8Q8Di6KVM66xGhYXn0n0nn075uD00nn075uD0ew26QuD0ew2z1bRT6r\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"70.4.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1434960,384,264,48]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2296.8,\"onlineMoneyMade\":1434960,\"onlineRunningTime\":474.2099999999816,\"pid\":96,\"ramUsage\":2.6,\"server\":\"I.I.I.I\",\"threads\":24,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///633889e9-e838-4207-91ba-e76f72843919\",\"moduleSequenceNumber\":21205}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":22710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":19797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":354,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-813596-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[84,194,183,110,169,94,48,76,141,63,68,152,168,72,147,66],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"99.5.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[310134,78,72,12]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":534.6000000000001,\"onlineMoneyMade\":310134,\"onlineRunningTime\":474.2099999999816,\"pid\":100,\"ramUsage\":2.6,\"server\":\"avmnite-02h\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///57c9e8fe-d852-471b-b81d-0aed24a40da8\",\"moduleSequenceNumber\":21219}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":22723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":19822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":207,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"76.5.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":550,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"21.1.1.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"CSEC\":[0,0,0,1828]},\"filename\":\"hackfarm.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":26562.449873333335,\"offlineMoneyMade\":0,\"offlineRunningTime\":240112.349,\"onlineExpGained\":5484,\"onlineMoneyMade\":0,\"onlineRunningTime\":19713.0100000366,\"pid\":11,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"CSEC\\\";\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\t\\tweaken(target);\\r\\n\\r\\n}\",\"filename\":\"hackfarm.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":22707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":19787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-612918.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1000001101011111\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"43.7.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"19.3.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"16.3.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"darkweb\",\"moduleSequenceNumber\":22731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"56.3.9.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[191655,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":191655,\"onlineRunningTime\":474.2099999999816,\"pid\":102,\"ramUsage\":2.6,\"server\":\"pserv-0\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///1c63b364-eb02-4dfd-a3a0-3b6078d1f66c\",\"moduleSequenceNumber\":172}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-0\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///72f53dbc-95ab-475d-94ba-61e06fcc362f\",\"moduleSequenceNumber\":21226}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-0\",\"moduleSequenceNumber\":22732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"moduleSequenceNumber\":3451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"30.5.5.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[194718,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":194718,\"onlineRunningTime\":474.2099999999816,\"pid\":103,\"ramUsage\":2.6,\"server\":\"pserv-1\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///367f6080-1576-400b-b03d-f025106f42ce\",\"moduleSequenceNumber\":173}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-1\",\"moduleSequenceNumber\":117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///ddf6c26f-7f17-4a8a-84af-201262aa0088\",\"moduleSequenceNumber\":21227}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-1\",\"moduleSequenceNumber\":22733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"moduleSequenceNumber\":3453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"32.3.7.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[188928,45,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279.675,\"onlineMoneyMade\":188928,\"onlineRunningTime\":474.2099999999816,\"pid\":104,\"ramUsage\":2.6,\"server\":\"pserv-2\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///fb6f4382-139c-4a69-9d7c-743939a6c362\",\"moduleSequenceNumber\":174}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-2\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///1f8731a6-7c31-48ee-922c-df3166de6d87\",\"moduleSequenceNumber\":21228}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-2\",\"moduleSequenceNumber\":22734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"moduleSequenceNumber\":3455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"75.8.8.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[187161,45,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279.675,\"onlineMoneyMade\":187161,\"onlineRunningTime\":474.2099999999816,\"pid\":105,\"ramUsage\":2.6,\"server\":\"pserv-3\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///cbd03ad9-52da-4ead-ac74-83ad9a4a9e62\",\"moduleSequenceNumber\":175}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-3\",\"moduleSequenceNumber\":121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///1c4b585a-3880-4355-ba13-d5eebe422ce4\",\"moduleSequenceNumber\":21229}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-3\",\"moduleSequenceNumber\":22735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"moduleSequenceNumber\":3457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"67.8.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[194160,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":194160,\"onlineRunningTime\":474.2099999999816,\"pid\":106,\"ramUsage\":2.6,\"server\":\"pserv-4\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///f6b131d4-f518-4c59-a80c-1e312fabba19\",\"moduleSequenceNumber\":176}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-4\",\"moduleSequenceNumber\":123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///ee21a246-10ad-4768-8a1c-cb17ab155fcd\",\"moduleSequenceNumber\":21230}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-4\",\"moduleSequenceNumber\":22736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"moduleSequenceNumber\":3459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"99.2.1.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[185892,45,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279.675,\"onlineMoneyMade\":185892,\"onlineRunningTime\":474.2099999999816,\"pid\":107,\"ramUsage\":2.6,\"server\":\"pserv-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///48fe0034-96f5-4359-9c5b-8bd7eb5d9cac\",\"moduleSequenceNumber\":177}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-5\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///8e6d703c-37e1-4c85-a88d-7c25738fe6df\",\"moduleSequenceNumber\":21231}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-5\",\"moduleSequenceNumber\":22737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"moduleSequenceNumber\":3461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"80.2.9.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[196545,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":196545,\"onlineRunningTime\":474.2099999999816,\"pid\":108,\"ramUsage\":2.6,\"server\":\"pserv-6\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///3f0462e8-15a4-4b50-8aae-039b1685af37\",\"moduleSequenceNumber\":178}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-6\",\"moduleSequenceNumber\":127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///cd5e6c98-269e-4202-b389-09a3fc8176b4\",\"moduleSequenceNumber\":21232}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-6\",\"moduleSequenceNumber\":22738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"moduleSequenceNumber\":3463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"16.0.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[191898,45,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279.675,\"onlineMoneyMade\":191898,\"onlineRunningTime\":474.2099999999816,\"pid\":109,\"ramUsage\":2.6,\"server\":\"pserv-7\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///6c96d51a-93ab-470d-9cca-083717513a31\",\"moduleSequenceNumber\":179}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-7\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///29518b49-fc7a-4c5e-a990-17732ab441fe\",\"moduleSequenceNumber\":21233}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-7\",\"moduleSequenceNumber\":22739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"moduleSequenceNumber\":3465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-0-0\",\"httpPortOpen\":false,\"ip\":\"78.1.0.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[192435,45,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279.675,\"onlineMoneyMade\":192435,\"onlineRunningTime\":474.2099999999816,\"pid\":110,\"ramUsage\":2.6,\"server\":\"pserv-0-0\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///a5f3df00-c64b-486e-b3df-3d36c6051926\",\"moduleSequenceNumber\":180}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-0-0\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///fcdaf15e-d009-43aa-ab0f-855e130ec700\",\"moduleSequenceNumber\":21234}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-0-0\",\"moduleSequenceNumber\":22740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-0-0\",\"moduleSequenceNumber\":3467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-1-0\",\"httpPortOpen\":false,\"ip\":\"26.9.2.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[187947,42,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":272.25000000000006,\"onlineMoneyMade\":187947,\"onlineRunningTime\":474.2099999999816,\"pid\":111,\"ramUsage\":2.6,\"server\":\"pserv-1-0\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///d249f530-2251-4053-8a94-09b5603eb3f4\",\"moduleSequenceNumber\":181}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-1-0\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///026feae0-0b14-46fd-bac6-fb4910d47661\",\"moduleSequenceNumber\":21235}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-1-0\",\"moduleSequenceNumber\":22741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1-0\",\"moduleSequenceNumber\":3469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-2-0\",\"httpPortOpen\":false,\"ip\":\"97.4.4.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[162540,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":162540,\"onlineRunningTime\":474.2099999999816,\"pid\":112,\"ramUsage\":2.6,\"server\":\"pserv-2-0\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///0fd8be94-982e-4c0b-8618-a2b518e8dfa2\",\"moduleSequenceNumber\":182}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-2-0\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///7a4ac4e8-ae9d-4a55-80ad-8cedfaff4453\",\"moduleSequenceNumber\":21236}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-2-0\",\"moduleSequenceNumber\":22742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-2-0\",\"moduleSequenceNumber\":3471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-3-0\",\"httpPortOpen\":false,\"ip\":\"66.0.3.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[136056,39,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.82500000000005,\"onlineMoneyMade\":136056,\"onlineRunningTime\":474.2099999999816,\"pid\":113,\"ramUsage\":2.6,\"server\":\"pserv-3-0\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///91c49dd9-377a-4c64-a7c8-9fdf70b2828a\",\"moduleSequenceNumber\":183}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-3-0\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///7dd07fbf-ad21-4503-a5a1-a49ebeafbb4d\",\"moduleSequenceNumber\":21237}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-3-0\",\"moduleSequenceNumber\":22743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-3-0\",\"moduleSequenceNumber\":3473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-4-0\",\"httpPortOpen\":false,\"ip\":\"32.4.2.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[161097,45,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279.675,\"onlineMoneyMade\":161097,\"onlineRunningTime\":474.2099999999816,\"pid\":114,\"ramUsage\":2.6,\"server\":\"pserv-4-0\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///9f0dfc66-f5a8-4ccb-8b9b-a3fa0f76ba46\",\"moduleSequenceNumber\":184}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-4-0\",\"moduleSequenceNumber\":139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///45dfb892-88f8-4018-930d-da5fee5c0d28\",\"moduleSequenceNumber\":21238}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-4-0\",\"moduleSequenceNumber\":22744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4-0\",\"moduleSequenceNumber\":3475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-5-0\",\"httpPortOpen\":false,\"ip\":\"69.7.9.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[139500,42,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":272.25000000000006,\"onlineMoneyMade\":139500,\"onlineRunningTime\":474.2099999999816,\"pid\":115,\"ramUsage\":2.6,\"server\":\"pserv-5-0\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///d0f56a11-75ab-401b-9abc-53b4c3c2b85d\",\"moduleSequenceNumber\":185}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-5-0\",\"moduleSequenceNumber\":141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///58ae9691-b8bc-4fab-830f-af33b49c2691\",\"moduleSequenceNumber\":21239}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-5-0\",\"moduleSequenceNumber\":22745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-5-0\",\"moduleSequenceNumber\":3477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-6-0\",\"httpPortOpen\":false,\"ip\":\"70.9.8.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[173391,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":173391,\"onlineRunningTime\":474.2099999999816,\"pid\":116,\"ramUsage\":2.6,\"server\":\"pserv-6-0\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///bbf64839-7a14-464f-85cf-3e27b403d969\",\"moduleSequenceNumber\":186}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-6-0\",\"moduleSequenceNumber\":143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///983a53a6-f594-44ba-82c7-b3fdd0932166\",\"moduleSequenceNumber\":21240}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-6-0\",\"moduleSequenceNumber\":22746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-6-0\",\"moduleSequenceNumber\":3479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-7-0\",\"httpPortOpen\":false,\"ip\":\"42.4.4.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[186882,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":186882,\"onlineRunningTime\":474.2099999999816,\"pid\":117,\"ramUsage\":2.6,\"server\":\"pserv-7-0\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///9caa5087-0272-49c1-960f-aece9bbdb441\",\"moduleSequenceNumber\":187}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-7-0\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///226f3209-6786-4a73-9504-3f8057cb906e\",\"moduleSequenceNumber\":21241}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-7-0\",\"moduleSequenceNumber\":22747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-7-0\",\"moduleSequenceNumber\":3481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"52.9.5.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[151275,42,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":272.25000000000006,\"onlineMoneyMade\":151275,\"onlineRunningTime\":474.2099999999816,\"pid\":118,\"ramUsage\":2.6,\"server\":\"pserv-8\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///604eb157-b5ca-4b28-a93a-147abd1e1806\",\"moduleSequenceNumber\":188}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-8\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///3df9a12d-e753-4ae1-9976-17595213f778\",\"moduleSequenceNumber\":21242}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-8\",\"moduleSequenceNumber\":22748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"moduleSequenceNumber\":3483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"32.3.0.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[182871,45,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279.675,\"onlineMoneyMade\":182871,\"onlineRunningTime\":474.2099999999816,\"pid\":119,\"ramUsage\":2.6,\"server\":\"pserv-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///065becf2-052c-4b01-9db3-3c2753030160\",\"moduleSequenceNumber\":189}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-9\",\"moduleSequenceNumber\":149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///f5fc136c-e584-48ac-95aa-88837d478955\",\"moduleSequenceNumber\":21243}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-9\",\"moduleSequenceNumber\":22749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"moduleSequenceNumber\":3485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"92.5.7.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[194448,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":194448,\"onlineRunningTime\":474.2099999999816,\"pid\":120,\"ramUsage\":2.6,\"server\":\"pserv-10\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///0a7bf397-b049-4972-bb14-740dc839c889\",\"moduleSequenceNumber\":190}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-10\",\"moduleSequenceNumber\":151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///528e70a1-25a3-407d-bd4c-96a2fc40df79\",\"moduleSequenceNumber\":21244}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-10\",\"moduleSequenceNumber\":22750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"moduleSequenceNumber\":3487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"28.7.1.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[176454,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":176454,\"onlineRunningTime\":474.2099999999816,\"pid\":121,\"ramUsage\":2.6,\"server\":\"pserv-11\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///2230435d-0b8c-42dc-b4e9-cf31d801827d\",\"moduleSequenceNumber\":191}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-11\",\"moduleSequenceNumber\":153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///d5f6e35a-4fc4-4e05-89ac-aef1a2d94878\",\"moduleSequenceNumber\":21245}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-11\",\"moduleSequenceNumber\":22751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"moduleSequenceNumber\":3489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"87.9.8.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[135927,39,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.8250000000001,\"onlineMoneyMade\":135927,\"onlineRunningTime\":474.2099999999816,\"pid\":122,\"ramUsage\":2.6,\"server\":\"pserv-12\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///adc65864-5734-483d-9605-fb7b8e034cf1\",\"moduleSequenceNumber\":192}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-12\",\"moduleSequenceNumber\":155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///0ceca56c-c152-4f07-8410-8d173208adff\",\"moduleSequenceNumber\":21246}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-12\",\"moduleSequenceNumber\":22752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"moduleSequenceNumber\":3491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"89.5.9.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[181629,48,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287.1,\"onlineMoneyMade\":181629,\"onlineRunningTime\":474.2099999999816,\"pid\":123,\"ramUsage\":2.6,\"server\":\"pserv-13\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///7c38d8ba-e5e9-4a19-85b1-fb29adc8efea\",\"moduleSequenceNumber\":193}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-13\",\"moduleSequenceNumber\":157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///70db45fc-da86-405b-b803-91775832be3c\",\"moduleSequenceNumber\":21247}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-13\",\"moduleSequenceNumber\":22753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"moduleSequenceNumber\":3493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"42.8.3.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[172341,45,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279.675,\"onlineMoneyMade\":172341,\"onlineRunningTime\":474.2099999999816,\"pid\":124,\"ramUsage\":2.6,\"server\":\"pserv-14\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///70820f66-e092-4541-bc54-45b9d28c83c5\",\"moduleSequenceNumber\":194}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-14\",\"moduleSequenceNumber\":159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///f86dff97-ea9a-479d-8eed-7ed2e4cccde9\",\"moduleSequenceNumber\":21248}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-14\",\"moduleSequenceNumber\":22754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"moduleSequenceNumber\":3495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"73.7.3.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[152295,42,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":272.25000000000006,\"onlineMoneyMade\":152295,\"onlineRunningTime\":474.2099999999816,\"pid\":125,\"ramUsage\":2.6,\"server\":\"pserv-15\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///161b5b71-5ebf-4412-8ea7-5ab9eed0137d\",\"moduleSequenceNumber\":195}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-15\",\"moduleSequenceNumber\":161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///b70ca0a1-8330-45de-9ca5-54091aab3d6b\",\"moduleSequenceNumber\":21249}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-15\",\"moduleSequenceNumber\":22755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"moduleSequenceNumber\":3497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"96.4.2.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[159576,45,33,6]},\"filename\":\"early-hack-template.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":279.675,\"onlineMoneyMade\":159576,\"onlineRunningTime\":474.2099999999816,\"pid\":126,\"ramUsage\":2.6,\"server\":\"pserv-16\",\"threads\":3,\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///7bdb4483-cb54-4539-ad51-1f4667d5bb2d\",\"moduleSequenceNumber\":196}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"joesguns\\\";\\r\\n\\r\\nvar moneyThreshold = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThreshold = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\tbrutessh(target);\\r\\n}\\r\\n\\r\\nnuke(target);\\r\\n\\r\\nwhile (true) {\\r\\n\\r\\n\\r\\n\\tif (getServerSecurityLevel > securityThreshold) {\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n\\telse if (getServerMoneyAvailable < moneyThreshold) {\\r\\n\\t\\tgrow(target);\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\thack(target);\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-16\",\"moduleSequenceNumber\":163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    var target = ns.args[0];\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    ns.nuke(target);\\n\\n\\n    while (true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target);\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target);\\n        } else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\",\"filename\":\"early-hack-template.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early-hack-template.js\",\"url\":\"blob:file:///4ced8ccf-efee-438c-acca-d89effcf4328\",\"moduleSequenceNumber\":21250}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"pserv-16\",\"moduleSequenceNumber\":22756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tlet serverToMine = ns.args[0];\\n\\n\\n\\twhile (true) {\\n\\n\\t\\tawait ns.weaken(serverToMine);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"hackFarmGeneral.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"moduleSequenceNumber\":3499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":419.98466153847005,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1.8209641025641026,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":7943.067872728331}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":3802.6166666657205}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":4061.6958974349695}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":255.69999999997682}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":209916.04853829232}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"deploy\":\"run v2/deployer.js\"}","GlobalAliasesSave":"{\"killSwitch\":\"run killSwitch.js\",\"startUp\":\"run startUp.js\",\"workout\":\"run farmingExp/workout.js\"}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-320,\"y\":280,\"opened\":false},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"19","AllGangsSave":"","LastExportBonus":"1659749276428","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}